func findOrder(numCourses int, prerequisites [][]int) []int {
    var (
        edges = make([][]int,numCourses) //存储图的边
        visited = make([]int,numCourses)//存储节点的访问状态，0表示未访问，1表示访问中，2表示访问结束
        valid = true //判断图中是否存在环
        result = []int{} //用作栈，存储拓扑排序结果
        dfs func(u int)
    )
    for _,info := range prerequisites {
        edges[info[1]] = append(edges[info[1]],info[0])
    }
    dfs = func(u int) {
        visited[u] = 1
        for _,v := range edges[u] {
            if visited[v] == 0 {
                dfs(v)
                if !valid {
                    return
                }
            }else if visited[v] == 1 {
                valid = false
                return
            }
        }
        visited[u] = 2
        result = append(result,u)
    }
    for i := 0 ; i < numCourses ; i ++ {
        if visited[i] == 0 {
            dfs(i)
        }
    }
    if !valid {
        return []int{}
    }
    for i := 0 ; i < len(result)/2 ; i++ {
        result[i],result[len(result)-i-1] = result[len(result)-i-1],result[i]
    }
    return result
}