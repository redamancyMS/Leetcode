//用两个队列完成，一个主队列stack，一个辅助队列minStack
//主队列负责添加元素，辅助队列负责统计当前操作后主队列中的最小元素值是多少

type MinStack struct {
    stack []int
    minStack []int
}


/** initialize your data structure here. */
func Constructor() MinStack {
    return MinStack{
        stack:[]int{},
        minStack:[]int{math.MaxInt64},
    }
}

func (this *MinStack) Push(x int)  {
    this.stack = append(this.stack,x)
    top := this.minStack[len(this.minStack)-1]
    this.minStack = append(this.minStack,min(top,x))
}


func (this *MinStack) Pop()  {
    this.stack = this.stack[:len(this.stack)-1]
    this.minStack = this.minStack[:len(this.minStack)-1]
}


func (this *MinStack) Top() int {
    return this.stack[len(this.stack)-1]
}


func (this *MinStack) Min() int {
    return this.minStack[len(this.minStack)-1]
}

func min(a,b int)int{
    if a < b {
        return a
    }
    return b
}


/**
 * Your MinStack object will be instantiated and called as such:
 * obj := Constructor();
 * obj.Push(x);
 * obj.Pop();
 * param_3 := obj.Top();
 * param_4 := obj.Min();
 */